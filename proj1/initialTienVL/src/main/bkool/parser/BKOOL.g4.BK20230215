grammar BKOOL;

@lexer::header {
from lexererr import *
}

options{
	language=Python3;
}

program  : decllist EOF ;

//BNF
decllist: decl decllist | decl;
decl: vardecl | fundecl;
vardecl: typ idlist SEMI;
typ: INT | FLOAT;
idlist: ID COMMA idlist | ID;


fundecl: typ ID paramdecl body;
paramdecl: LB paramlist  RB;
paramlist: paramprime | ;
paramprime: param SEMI paramprime | param;
param: typ idlist;
body: LCB stmtlist LCB;
stmtlist: stmt stmtlist | ;
stmt: vardecl | assignstmt | callstmt | returnstmt;
assignstmt: ID EQ expr SEMI;
callstmt: ID LCB exprlist RCB SEMI;
exprlist: exprprime | ;
exprprime: expr COMMA exprprime | expr;
//expr: ID;
returnstmt: RETURN ID;



//do uu tien: * / > - > +
//ket hop:
//     + ket hop phai
//     - ko co tinh ket hop
//     *, / ket hop trai
expr: expr1 ADD expr | expr1;
expr1: expr2 SUB expr2 | expr2;
expr2: expr2 (MUL | DIV) expr3 | expr3;
expr3: INTLIT | FLOATLIT | callexpr | subexpr ;
callexpr: ID LB exprlist RB;
subexpr: LB expr RB;

INT: 'int'; FLOAT: 'float';
SEMI: ';';
COMMA: ',';
LB: '(';
RB: ')';
//curly brackets
LCB: '{';
RCB: '}';
RETURN: 'return';
EQ: '=';
ID: [a-zA-Z]+;

ADD: '+';
SUB: '-';
MUL: '*';
DIV: '/';
INTLIT: [0-9]+;
FLOATLIT: [0-9]+ '.' [0-9]+;




WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines

ERROR_CHAR: .;
UNCLOSE_STRING: .;
ILLEGAL_ESCAPE: .;